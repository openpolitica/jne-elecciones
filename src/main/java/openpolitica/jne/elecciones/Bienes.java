/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package openpolitica.jne.elecciones;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Bienes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6227287494645849458L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Bienes\",\"namespace\":\"openpolitica.jne.elecciones\",\"fields\":[{\"name\":\"bienes_otros\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BienOtro\",\"fields\":[{\"name\":\"tipo_bien\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXOTROBIEN\"},{\"name\":\"description\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"TXDESCRIPCION\"},{\"name\":\"valor\",\"type\":\"double\",\"doc\":\"FLVALOR\"}]}},\"doc\":\"TODO\"},{\"name\":\"bienes_muebles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BienMueble\",\"fields\":[{\"name\":\"tipo_vehiculo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXVEHICULO\"},{\"name\":\"marca\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXPLACA\"},{\"name\":\"modelo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXPLACA\"},{\"name\":\"anio\",\"type\":[\"int\",\"null\"],\"doc\":\"TXPLACA\"},{\"name\":\"placa\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXPLACA\"},{\"name\":\"valor\",\"type\":\"double\",\"doc\":\"FLVALOR\"},{\"name\":\"caracteristica\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"comentario\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},\"doc\":\"BIENMUEBLES\"},{\"name\":\"bienes_inmuebles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BienInmueble\",\"fields\":[{\"name\":\"tipo_bien\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXTIPOBIENINMUEBLE\"},{\"name\":\"ubicacion_ubigeo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_pais\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_departamento\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_provincia\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_distrito\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_direccion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sunarp_tiene\",\"type\":\"boolean\"},{\"name\":\"sunarp_partida\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"comentario\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"auto_valuo\",\"type\":\"double\",\"doc\":\"FLAUTOVALUO\"},{\"name\":\"uit\",\"type\":\"double\"}]}},\"doc\":\"BIENINMUEBLES\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Bienes> ENCODER =
      new BinaryMessageEncoder<Bienes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Bienes> DECODER =
      new BinaryMessageDecoder<Bienes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Bienes> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Bienes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Bienes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Bienes>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Bienes to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Bienes from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Bienes instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Bienes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** TODO */
   private java.util.List<openpolitica.jne.elecciones.BienOtro> bienes_otros;
  /** BIENMUEBLES */
   private java.util.List<openpolitica.jne.elecciones.BienMueble> bienes_muebles;
  /** BIENINMUEBLES */
   private java.util.List<openpolitica.jne.elecciones.BienInmueble> bienes_inmuebles;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Bienes() {}

  /**
   * All-args constructor.
   * @param bienes_otros TODO
   * @param bienes_muebles BIENMUEBLES
   * @param bienes_inmuebles BIENINMUEBLES
   */
  public Bienes(java.util.List<openpolitica.jne.elecciones.BienOtro> bienes_otros, java.util.List<openpolitica.jne.elecciones.BienMueble> bienes_muebles, java.util.List<openpolitica.jne.elecciones.BienInmueble> bienes_inmuebles) {
    this.bienes_otros = bienes_otros;
    this.bienes_muebles = bienes_muebles;
    this.bienes_inmuebles = bienes_inmuebles;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bienes_otros;
    case 1: return bienes_muebles;
    case 2: return bienes_inmuebles;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bienes_otros = (java.util.List<openpolitica.jne.elecciones.BienOtro>)value$; break;
    case 1: bienes_muebles = (java.util.List<openpolitica.jne.elecciones.BienMueble>)value$; break;
    case 2: bienes_inmuebles = (java.util.List<openpolitica.jne.elecciones.BienInmueble>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bienes_otros' field.
   * @return TODO
   */
  public java.util.List<openpolitica.jne.elecciones.BienOtro> getBienesOtros() {
    return bienes_otros;
  }


  /**
   * Sets the value of the 'bienes_otros' field.
   * TODO
   * @param value the value to set.
   */
  public void setBienesOtros(java.util.List<openpolitica.jne.elecciones.BienOtro> value) {
    this.bienes_otros = value;
  }

  /**
   * Gets the value of the 'bienes_muebles' field.
   * @return BIENMUEBLES
   */
  public java.util.List<openpolitica.jne.elecciones.BienMueble> getBienesMuebles() {
    return bienes_muebles;
  }


  /**
   * Sets the value of the 'bienes_muebles' field.
   * BIENMUEBLES
   * @param value the value to set.
   */
  public void setBienesMuebles(java.util.List<openpolitica.jne.elecciones.BienMueble> value) {
    this.bienes_muebles = value;
  }

  /**
   * Gets the value of the 'bienes_inmuebles' field.
   * @return BIENINMUEBLES
   */
  public java.util.List<openpolitica.jne.elecciones.BienInmueble> getBienesInmuebles() {
    return bienes_inmuebles;
  }


  /**
   * Sets the value of the 'bienes_inmuebles' field.
   * BIENINMUEBLES
   * @param value the value to set.
   */
  public void setBienesInmuebles(java.util.List<openpolitica.jne.elecciones.BienInmueble> value) {
    this.bienes_inmuebles = value;
  }

  /**
   * Creates a new Bienes RecordBuilder.
   * @return A new Bienes RecordBuilder
   */
  public static openpolitica.jne.elecciones.Bienes.Builder newBuilder() {
    return new openpolitica.jne.elecciones.Bienes.Builder();
  }

  /**
   * Creates a new Bienes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Bienes RecordBuilder
   */
  public static openpolitica.jne.elecciones.Bienes.Builder newBuilder(openpolitica.jne.elecciones.Bienes.Builder other) {
    if (other == null) {
      return new openpolitica.jne.elecciones.Bienes.Builder();
    } else {
      return new openpolitica.jne.elecciones.Bienes.Builder(other);
    }
  }

  /**
   * Creates a new Bienes RecordBuilder by copying an existing Bienes instance.
   * @param other The existing instance to copy.
   * @return A new Bienes RecordBuilder
   */
  public static openpolitica.jne.elecciones.Bienes.Builder newBuilder(openpolitica.jne.elecciones.Bienes other) {
    if (other == null) {
      return new openpolitica.jne.elecciones.Bienes.Builder();
    } else {
      return new openpolitica.jne.elecciones.Bienes.Builder(other);
    }
  }

  /**
   * RecordBuilder for Bienes instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Bienes>
    implements org.apache.avro.data.RecordBuilder<Bienes> {

    /** TODO */
    private java.util.List<openpolitica.jne.elecciones.BienOtro> bienes_otros;
    /** BIENMUEBLES */
    private java.util.List<openpolitica.jne.elecciones.BienMueble> bienes_muebles;
    /** BIENINMUEBLES */
    private java.util.List<openpolitica.jne.elecciones.BienInmueble> bienes_inmuebles;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(openpolitica.jne.elecciones.Bienes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bienes_otros)) {
        this.bienes_otros = data().deepCopy(fields()[0].schema(), other.bienes_otros);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bienes_muebles)) {
        this.bienes_muebles = data().deepCopy(fields()[1].schema(), other.bienes_muebles);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bienes_inmuebles)) {
        this.bienes_inmuebles = data().deepCopy(fields()[2].schema(), other.bienes_inmuebles);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Bienes instance
     * @param other The existing instance to copy.
     */
    private Builder(openpolitica.jne.elecciones.Bienes other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bienes_otros)) {
        this.bienes_otros = data().deepCopy(fields()[0].schema(), other.bienes_otros);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bienes_muebles)) {
        this.bienes_muebles = data().deepCopy(fields()[1].schema(), other.bienes_muebles);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bienes_inmuebles)) {
        this.bienes_inmuebles = data().deepCopy(fields()[2].schema(), other.bienes_inmuebles);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'bienes_otros' field.
      * TODO
      * @return The value.
      */
    public java.util.List<openpolitica.jne.elecciones.BienOtro> getBienesOtros() {
      return bienes_otros;
    }


    /**
      * Sets the value of the 'bienes_otros' field.
      * TODO
      * @param value The value of 'bienes_otros'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.Bienes.Builder setBienesOtros(java.util.List<openpolitica.jne.elecciones.BienOtro> value) {
      validate(fields()[0], value);
      this.bienes_otros = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bienes_otros' field has been set.
      * TODO
      * @return True if the 'bienes_otros' field has been set, false otherwise.
      */
    public boolean hasBienesOtros() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bienes_otros' field.
      * TODO
      * @return This builder.
      */
    public openpolitica.jne.elecciones.Bienes.Builder clearBienesOtros() {
      bienes_otros = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bienes_muebles' field.
      * BIENMUEBLES
      * @return The value.
      */
    public java.util.List<openpolitica.jne.elecciones.BienMueble> getBienesMuebles() {
      return bienes_muebles;
    }


    /**
      * Sets the value of the 'bienes_muebles' field.
      * BIENMUEBLES
      * @param value The value of 'bienes_muebles'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.Bienes.Builder setBienesMuebles(java.util.List<openpolitica.jne.elecciones.BienMueble> value) {
      validate(fields()[1], value);
      this.bienes_muebles = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bienes_muebles' field has been set.
      * BIENMUEBLES
      * @return True if the 'bienes_muebles' field has been set, false otherwise.
      */
    public boolean hasBienesMuebles() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bienes_muebles' field.
      * BIENMUEBLES
      * @return This builder.
      */
    public openpolitica.jne.elecciones.Bienes.Builder clearBienesMuebles() {
      bienes_muebles = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bienes_inmuebles' field.
      * BIENINMUEBLES
      * @return The value.
      */
    public java.util.List<openpolitica.jne.elecciones.BienInmueble> getBienesInmuebles() {
      return bienes_inmuebles;
    }


    /**
      * Sets the value of the 'bienes_inmuebles' field.
      * BIENINMUEBLES
      * @param value The value of 'bienes_inmuebles'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.Bienes.Builder setBienesInmuebles(java.util.List<openpolitica.jne.elecciones.BienInmueble> value) {
      validate(fields()[2], value);
      this.bienes_inmuebles = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bienes_inmuebles' field has been set.
      * BIENINMUEBLES
      * @return True if the 'bienes_inmuebles' field has been set, false otherwise.
      */
    public boolean hasBienesInmuebles() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bienes_inmuebles' field.
      * BIENINMUEBLES
      * @return This builder.
      */
    public openpolitica.jne.elecciones.Bienes.Builder clearBienesInmuebles() {
      bienes_inmuebles = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Bienes build() {
      try {
        Bienes record = new Bienes();
        record.bienes_otros = fieldSetFlags()[0] ? this.bienes_otros : (java.util.List<openpolitica.jne.elecciones.BienOtro>) defaultValue(fields()[0]);
        record.bienes_muebles = fieldSetFlags()[1] ? this.bienes_muebles : (java.util.List<openpolitica.jne.elecciones.BienMueble>) defaultValue(fields()[1]);
        record.bienes_inmuebles = fieldSetFlags()[2] ? this.bienes_inmuebles : (java.util.List<openpolitica.jne.elecciones.BienInmueble>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Bienes>
    WRITER$ = (org.apache.avro.io.DatumWriter<Bienes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Bienes>
    READER$ = (org.apache.avro.io.DatumReader<Bienes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.bienes_otros.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (openpolitica.jne.elecciones.BienOtro e0: this.bienes_otros) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.bienes_muebles.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (openpolitica.jne.elecciones.BienMueble e1: this.bienes_muebles) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.bienes_inmuebles.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (openpolitica.jne.elecciones.BienInmueble e2: this.bienes_inmuebles) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<openpolitica.jne.elecciones.BienOtro> a0 = this.bienes_otros;
      if (a0 == null) {
        a0 = new SpecificData.Array<openpolitica.jne.elecciones.BienOtro>((int)size0, SCHEMA$.getField("bienes_otros").schema());
        this.bienes_otros = a0;
      } else a0.clear();
      SpecificData.Array<openpolitica.jne.elecciones.BienOtro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.BienOtro>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          openpolitica.jne.elecciones.BienOtro e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new openpolitica.jne.elecciones.BienOtro();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<openpolitica.jne.elecciones.BienMueble> a1 = this.bienes_muebles;
      if (a1 == null) {
        a1 = new SpecificData.Array<openpolitica.jne.elecciones.BienMueble>((int)size1, SCHEMA$.getField("bienes_muebles").schema());
        this.bienes_muebles = a1;
      } else a1.clear();
      SpecificData.Array<openpolitica.jne.elecciones.BienMueble> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.BienMueble>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          openpolitica.jne.elecciones.BienMueble e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new openpolitica.jne.elecciones.BienMueble();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<openpolitica.jne.elecciones.BienInmueble> a2 = this.bienes_inmuebles;
      if (a2 == null) {
        a2 = new SpecificData.Array<openpolitica.jne.elecciones.BienInmueble>((int)size2, SCHEMA$.getField("bienes_inmuebles").schema());
        this.bienes_inmuebles = a2;
      } else a2.clear();
      SpecificData.Array<openpolitica.jne.elecciones.BienInmueble> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.BienInmueble>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          openpolitica.jne.elecciones.BienInmueble e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new openpolitica.jne.elecciones.BienInmueble();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<openpolitica.jne.elecciones.BienOtro> a0 = this.bienes_otros;
          if (a0 == null) {
            a0 = new SpecificData.Array<openpolitica.jne.elecciones.BienOtro>((int)size0, SCHEMA$.getField("bienes_otros").schema());
            this.bienes_otros = a0;
          } else a0.clear();
          SpecificData.Array<openpolitica.jne.elecciones.BienOtro> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.BienOtro>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              openpolitica.jne.elecciones.BienOtro e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new openpolitica.jne.elecciones.BienOtro();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<openpolitica.jne.elecciones.BienMueble> a1 = this.bienes_muebles;
          if (a1 == null) {
            a1 = new SpecificData.Array<openpolitica.jne.elecciones.BienMueble>((int)size1, SCHEMA$.getField("bienes_muebles").schema());
            this.bienes_muebles = a1;
          } else a1.clear();
          SpecificData.Array<openpolitica.jne.elecciones.BienMueble> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.BienMueble>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              openpolitica.jne.elecciones.BienMueble e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new openpolitica.jne.elecciones.BienMueble();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<openpolitica.jne.elecciones.BienInmueble> a2 = this.bienes_inmuebles;
          if (a2 == null) {
            a2 = new SpecificData.Array<openpolitica.jne.elecciones.BienInmueble>((int)size2, SCHEMA$.getField("bienes_inmuebles").schema());
            this.bienes_inmuebles = a2;
          } else a2.clear();
          SpecificData.Array<openpolitica.jne.elecciones.BienInmueble> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.BienInmueble>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              openpolitica.jne.elecciones.BienInmueble e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new openpolitica.jne.elecciones.BienInmueble();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










