/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package openpolitica.jne.elecciones;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BienMueble extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7212873088586423617L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BienMueble\",\"namespace\":\"openpolitica.jne.elecciones\",\"fields\":[{\"name\":\"tipo_vehiculo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXVEHICULO\"},{\"name\":\"marca\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXPLACA\"},{\"name\":\"modelo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXPLACA\"},{\"name\":\"anio\",\"type\":[\"int\",\"null\"],\"doc\":\"TXPLACA\"},{\"name\":\"placa\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXPLACA\"},{\"name\":\"valor\",\"type\":\"double\",\"doc\":\"FLVALOR\"},{\"name\":\"caracteristica\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"comentario\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BienMueble> ENCODER =
      new BinaryMessageEncoder<BienMueble>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BienMueble> DECODER =
      new BinaryMessageDecoder<BienMueble>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BienMueble> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BienMueble> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BienMueble> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BienMueble>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BienMueble to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BienMueble from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BienMueble instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BienMueble fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** TXVEHICULO */
   private java.lang.String tipo_vehiculo;
  /** TXPLACA */
   private java.lang.String marca;
  /** TXPLACA */
   private java.lang.String modelo;
  /** TXPLACA */
   private java.lang.Integer anio;
  /** TXPLACA */
   private java.lang.String placa;
  /** FLVALOR */
   private double valor;
   private java.lang.String caracteristica;
   private java.lang.String comentario;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BienMueble() {}

  /**
   * All-args constructor.
   * @param tipo_vehiculo TXVEHICULO
   * @param marca TXPLACA
   * @param modelo TXPLACA
   * @param anio TXPLACA
   * @param placa TXPLACA
   * @param valor FLVALOR
   * @param caracteristica The new value for caracteristica
   * @param comentario The new value for comentario
   */
  public BienMueble(java.lang.String tipo_vehiculo, java.lang.String marca, java.lang.String modelo, java.lang.Integer anio, java.lang.String placa, java.lang.Double valor, java.lang.String caracteristica, java.lang.String comentario) {
    this.tipo_vehiculo = tipo_vehiculo;
    this.marca = marca;
    this.modelo = modelo;
    this.anio = anio;
    this.placa = placa;
    this.valor = valor;
    this.caracteristica = caracteristica;
    this.comentario = comentario;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tipo_vehiculo;
    case 1: return marca;
    case 2: return modelo;
    case 3: return anio;
    case 4: return placa;
    case 5: return valor;
    case 6: return caracteristica;
    case 7: return comentario;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tipo_vehiculo = value$ != null ? value$.toString() : null; break;
    case 1: marca = value$ != null ? value$.toString() : null; break;
    case 2: modelo = value$ != null ? value$.toString() : null; break;
    case 3: anio = (java.lang.Integer)value$; break;
    case 4: placa = value$ != null ? value$.toString() : null; break;
    case 5: valor = (java.lang.Double)value$; break;
    case 6: caracteristica = value$ != null ? value$.toString() : null; break;
    case 7: comentario = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tipo_vehiculo' field.
   * @return TXVEHICULO
   */
  public java.lang.String getTipoVehiculo() {
    return tipo_vehiculo;
  }


  /**
   * Sets the value of the 'tipo_vehiculo' field.
   * TXVEHICULO
   * @param value the value to set.
   */
  public void setTipoVehiculo(java.lang.String value) {
    this.tipo_vehiculo = value;
  }

  /**
   * Gets the value of the 'marca' field.
   * @return TXPLACA
   */
  public java.lang.String getMarca() {
    return marca;
  }


  /**
   * Sets the value of the 'marca' field.
   * TXPLACA
   * @param value the value to set.
   */
  public void setMarca(java.lang.String value) {
    this.marca = value;
  }

  /**
   * Gets the value of the 'modelo' field.
   * @return TXPLACA
   */
  public java.lang.String getModelo() {
    return modelo;
  }


  /**
   * Sets the value of the 'modelo' field.
   * TXPLACA
   * @param value the value to set.
   */
  public void setModelo(java.lang.String value) {
    this.modelo = value;
  }

  /**
   * Gets the value of the 'anio' field.
   * @return TXPLACA
   */
  public java.lang.Integer getAnio() {
    return anio;
  }


  /**
   * Sets the value of the 'anio' field.
   * TXPLACA
   * @param value the value to set.
   */
  public void setAnio(java.lang.Integer value) {
    this.anio = value;
  }

  /**
   * Gets the value of the 'placa' field.
   * @return TXPLACA
   */
  public java.lang.String getPlaca() {
    return placa;
  }


  /**
   * Sets the value of the 'placa' field.
   * TXPLACA
   * @param value the value to set.
   */
  public void setPlaca(java.lang.String value) {
    this.placa = value;
  }

  /**
   * Gets the value of the 'valor' field.
   * @return FLVALOR
   */
  public double getValor() {
    return valor;
  }


  /**
   * Sets the value of the 'valor' field.
   * FLVALOR
   * @param value the value to set.
   */
  public void setValor(double value) {
    this.valor = value;
  }

  /**
   * Gets the value of the 'caracteristica' field.
   * @return The value of the 'caracteristica' field.
   */
  public java.lang.String getCaracteristica() {
    return caracteristica;
  }


  /**
   * Sets the value of the 'caracteristica' field.
   * @param value the value to set.
   */
  public void setCaracteristica(java.lang.String value) {
    this.caracteristica = value;
  }

  /**
   * Gets the value of the 'comentario' field.
   * @return The value of the 'comentario' field.
   */
  public java.lang.String getComentario() {
    return comentario;
  }


  /**
   * Sets the value of the 'comentario' field.
   * @param value the value to set.
   */
  public void setComentario(java.lang.String value) {
    this.comentario = value;
  }

  /**
   * Creates a new BienMueble RecordBuilder.
   * @return A new BienMueble RecordBuilder
   */
  public static openpolitica.jne.elecciones.BienMueble.Builder newBuilder() {
    return new openpolitica.jne.elecciones.BienMueble.Builder();
  }

  /**
   * Creates a new BienMueble RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BienMueble RecordBuilder
   */
  public static openpolitica.jne.elecciones.BienMueble.Builder newBuilder(openpolitica.jne.elecciones.BienMueble.Builder other) {
    if (other == null) {
      return new openpolitica.jne.elecciones.BienMueble.Builder();
    } else {
      return new openpolitica.jne.elecciones.BienMueble.Builder(other);
    }
  }

  /**
   * Creates a new BienMueble RecordBuilder by copying an existing BienMueble instance.
   * @param other The existing instance to copy.
   * @return A new BienMueble RecordBuilder
   */
  public static openpolitica.jne.elecciones.BienMueble.Builder newBuilder(openpolitica.jne.elecciones.BienMueble other) {
    if (other == null) {
      return new openpolitica.jne.elecciones.BienMueble.Builder();
    } else {
      return new openpolitica.jne.elecciones.BienMueble.Builder(other);
    }
  }

  /**
   * RecordBuilder for BienMueble instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BienMueble>
    implements org.apache.avro.data.RecordBuilder<BienMueble> {

    /** TXVEHICULO */
    private java.lang.String tipo_vehiculo;
    /** TXPLACA */
    private java.lang.String marca;
    /** TXPLACA */
    private java.lang.String modelo;
    /** TXPLACA */
    private java.lang.Integer anio;
    /** TXPLACA */
    private java.lang.String placa;
    /** FLVALOR */
    private double valor;
    private java.lang.String caracteristica;
    private java.lang.String comentario;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(openpolitica.jne.elecciones.BienMueble.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tipo_vehiculo)) {
        this.tipo_vehiculo = data().deepCopy(fields()[0].schema(), other.tipo_vehiculo);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.marca)) {
        this.marca = data().deepCopy(fields()[1].schema(), other.marca);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.modelo)) {
        this.modelo = data().deepCopy(fields()[2].schema(), other.modelo);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.anio)) {
        this.anio = data().deepCopy(fields()[3].schema(), other.anio);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.placa)) {
        this.placa = data().deepCopy(fields()[4].schema(), other.placa);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.valor)) {
        this.valor = data().deepCopy(fields()[5].schema(), other.valor);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.caracteristica)) {
        this.caracteristica = data().deepCopy(fields()[6].schema(), other.caracteristica);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.comentario)) {
        this.comentario = data().deepCopy(fields()[7].schema(), other.comentario);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing BienMueble instance
     * @param other The existing instance to copy.
     */
    private Builder(openpolitica.jne.elecciones.BienMueble other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.tipo_vehiculo)) {
        this.tipo_vehiculo = data().deepCopy(fields()[0].schema(), other.tipo_vehiculo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.marca)) {
        this.marca = data().deepCopy(fields()[1].schema(), other.marca);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.modelo)) {
        this.modelo = data().deepCopy(fields()[2].schema(), other.modelo);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.anio)) {
        this.anio = data().deepCopy(fields()[3].schema(), other.anio);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.placa)) {
        this.placa = data().deepCopy(fields()[4].schema(), other.placa);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valor)) {
        this.valor = data().deepCopy(fields()[5].schema(), other.valor);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.caracteristica)) {
        this.caracteristica = data().deepCopy(fields()[6].schema(), other.caracteristica);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.comentario)) {
        this.comentario = data().deepCopy(fields()[7].schema(), other.comentario);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'tipo_vehiculo' field.
      * TXVEHICULO
      * @return The value.
      */
    public java.lang.String getTipoVehiculo() {
      return tipo_vehiculo;
    }


    /**
      * Sets the value of the 'tipo_vehiculo' field.
      * TXVEHICULO
      * @param value The value of 'tipo_vehiculo'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setTipoVehiculo(java.lang.String value) {
      validate(fields()[0], value);
      this.tipo_vehiculo = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tipo_vehiculo' field has been set.
      * TXVEHICULO
      * @return True if the 'tipo_vehiculo' field has been set, false otherwise.
      */
    public boolean hasTipoVehiculo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tipo_vehiculo' field.
      * TXVEHICULO
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearTipoVehiculo() {
      tipo_vehiculo = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'marca' field.
      * TXPLACA
      * @return The value.
      */
    public java.lang.String getMarca() {
      return marca;
    }


    /**
      * Sets the value of the 'marca' field.
      * TXPLACA
      * @param value The value of 'marca'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setMarca(java.lang.String value) {
      validate(fields()[1], value);
      this.marca = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'marca' field has been set.
      * TXPLACA
      * @return True if the 'marca' field has been set, false otherwise.
      */
    public boolean hasMarca() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'marca' field.
      * TXPLACA
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearMarca() {
      marca = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'modelo' field.
      * TXPLACA
      * @return The value.
      */
    public java.lang.String getModelo() {
      return modelo;
    }


    /**
      * Sets the value of the 'modelo' field.
      * TXPLACA
      * @param value The value of 'modelo'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setModelo(java.lang.String value) {
      validate(fields()[2], value);
      this.modelo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'modelo' field has been set.
      * TXPLACA
      * @return True if the 'modelo' field has been set, false otherwise.
      */
    public boolean hasModelo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'modelo' field.
      * TXPLACA
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearModelo() {
      modelo = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'anio' field.
      * TXPLACA
      * @return The value.
      */
    public java.lang.Integer getAnio() {
      return anio;
    }


    /**
      * Sets the value of the 'anio' field.
      * TXPLACA
      * @param value The value of 'anio'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setAnio(java.lang.Integer value) {
      validate(fields()[3], value);
      this.anio = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'anio' field has been set.
      * TXPLACA
      * @return True if the 'anio' field has been set, false otherwise.
      */
    public boolean hasAnio() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'anio' field.
      * TXPLACA
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearAnio() {
      anio = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'placa' field.
      * TXPLACA
      * @return The value.
      */
    public java.lang.String getPlaca() {
      return placa;
    }


    /**
      * Sets the value of the 'placa' field.
      * TXPLACA
      * @param value The value of 'placa'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setPlaca(java.lang.String value) {
      validate(fields()[4], value);
      this.placa = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'placa' field has been set.
      * TXPLACA
      * @return True if the 'placa' field has been set, false otherwise.
      */
    public boolean hasPlaca() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'placa' field.
      * TXPLACA
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearPlaca() {
      placa = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'valor' field.
      * FLVALOR
      * @return The value.
      */
    public double getValor() {
      return valor;
    }


    /**
      * Sets the value of the 'valor' field.
      * FLVALOR
      * @param value The value of 'valor'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setValor(double value) {
      validate(fields()[5], value);
      this.valor = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'valor' field has been set.
      * FLVALOR
      * @return True if the 'valor' field has been set, false otherwise.
      */
    public boolean hasValor() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'valor' field.
      * FLVALOR
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearValor() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'caracteristica' field.
      * @return The value.
      */
    public java.lang.String getCaracteristica() {
      return caracteristica;
    }


    /**
      * Sets the value of the 'caracteristica' field.
      * @param value The value of 'caracteristica'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setCaracteristica(java.lang.String value) {
      validate(fields()[6], value);
      this.caracteristica = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'caracteristica' field has been set.
      * @return True if the 'caracteristica' field has been set, false otherwise.
      */
    public boolean hasCaracteristica() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'caracteristica' field.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearCaracteristica() {
      caracteristica = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'comentario' field.
      * @return The value.
      */
    public java.lang.String getComentario() {
      return comentario;
    }


    /**
      * Sets the value of the 'comentario' field.
      * @param value The value of 'comentario'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder setComentario(java.lang.String value) {
      validate(fields()[7], value);
      this.comentario = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'comentario' field has been set.
      * @return True if the 'comentario' field has been set, false otherwise.
      */
    public boolean hasComentario() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'comentario' field.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.BienMueble.Builder clearComentario() {
      comentario = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BienMueble build() {
      try {
        BienMueble record = new BienMueble();
        record.tipo_vehiculo = fieldSetFlags()[0] ? this.tipo_vehiculo : (java.lang.String) defaultValue(fields()[0]);
        record.marca = fieldSetFlags()[1] ? this.marca : (java.lang.String) defaultValue(fields()[1]);
        record.modelo = fieldSetFlags()[2] ? this.modelo : (java.lang.String) defaultValue(fields()[2]);
        record.anio = fieldSetFlags()[3] ? this.anio : (java.lang.Integer) defaultValue(fields()[3]);
        record.placa = fieldSetFlags()[4] ? this.placa : (java.lang.String) defaultValue(fields()[4]);
        record.valor = fieldSetFlags()[5] ? this.valor : (java.lang.Double) defaultValue(fields()[5]);
        record.caracteristica = fieldSetFlags()[6] ? this.caracteristica : (java.lang.String) defaultValue(fields()[6]);
        record.comentario = fieldSetFlags()[7] ? this.comentario : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BienMueble>
    WRITER$ = (org.apache.avro.io.DatumWriter<BienMueble>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BienMueble>
    READER$ = (org.apache.avro.io.DatumReader<BienMueble>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.tipo_vehiculo);

    out.writeString(this.marca);

    out.writeString(this.modelo);

    if (this.anio == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.anio);
    }

    out.writeString(this.placa);

    out.writeDouble(this.valor);

    out.writeString(this.caracteristica);

    out.writeString(this.comentario);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.tipo_vehiculo = in.readString();

      this.marca = in.readString();

      this.modelo = in.readString();

      if (in.readIndex() != 0) {
        in.readNull();
        this.anio = null;
      } else {
        this.anio = in.readInt();
      }

      this.placa = in.readString();

      this.valor = in.readDouble();

      this.caracteristica = in.readString();

      this.comentario = in.readString();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.tipo_vehiculo = in.readString();
          break;

        case 1:
          this.marca = in.readString();
          break;

        case 2:
          this.modelo = in.readString();
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.anio = null;
          } else {
            this.anio = in.readInt();
          }
          break;

        case 4:
          this.placa = in.readString();
          break;

        case 5:
          this.valor = in.readDouble();
          break;

        case 6:
          this.caracteristica = in.readString();
          break;

        case 7:
          this.comentario = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










