/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package openpolitica.jne.elecciones.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Sentencias extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8358272847932713561L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sentencias\",\"namespace\":\"openpolitica.jne.elecciones.data\",\"fields\":[{\"name\":\"sentencias_penales\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SentenciaPenal\",\"fields\":[{\"name\":\"expediente_penal\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"organo_judicial_penal\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"delito_penal\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fallo_penal\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"modalidad\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fallo_cumple\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sentencia_fecha\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}},{\"name\":\"sentencias_civiles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"SentenciaCivil\",\"fields\":[{\"name\":\"materia_sentencia\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"expediente_obliga\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"TXEXPEDIENTEOBLIGA\"},{\"name\":\"organo_judicial_obliga\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"TXORGANOJURIDICIALOBLIGA\"},{\"name\":\"fallo_obliga\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sentencias> ENCODER =
      new BinaryMessageEncoder<Sentencias>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sentencias> DECODER =
      new BinaryMessageDecoder<Sentencias>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Sentencias> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Sentencias> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Sentencias> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Sentencias>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Sentencias to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Sentencias from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Sentencias instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Sentencias fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> sentencias_penales;
   private java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> sentencias_civiles;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sentencias() {}

  /**
   * All-args constructor.
   * @param sentencias_penales The new value for sentencias_penales
   * @param sentencias_civiles The new value for sentencias_civiles
   */
  public Sentencias(java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> sentencias_penales, java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> sentencias_civiles) {
    this.sentencias_penales = sentencias_penales;
    this.sentencias_civiles = sentencias_civiles;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sentencias_penales;
    case 1: return sentencias_civiles;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sentencias_penales = (java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal>)value$; break;
    case 1: sentencias_civiles = (java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sentencias_penales' field.
   * @return The value of the 'sentencias_penales' field.
   */
  public java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> getSentenciasPenales() {
    return sentencias_penales;
  }


  /**
   * Sets the value of the 'sentencias_penales' field.
   * @param value the value to set.
   */
  public void setSentenciasPenales(java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> value) {
    this.sentencias_penales = value;
  }

  /**
   * Gets the value of the 'sentencias_civiles' field.
   * @return The value of the 'sentencias_civiles' field.
   */
  public java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> getSentenciasCiviles() {
    return sentencias_civiles;
  }


  /**
   * Sets the value of the 'sentencias_civiles' field.
   * @param value the value to set.
   */
  public void setSentenciasCiviles(java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> value) {
    this.sentencias_civiles = value;
  }

  /**
   * Creates a new Sentencias RecordBuilder.
   * @return A new Sentencias RecordBuilder
   */
  public static openpolitica.jne.elecciones.data.Sentencias.Builder newBuilder() {
    return new openpolitica.jne.elecciones.data.Sentencias.Builder();
  }

  /**
   * Creates a new Sentencias RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sentencias RecordBuilder
   */
  public static openpolitica.jne.elecciones.data.Sentencias.Builder newBuilder(openpolitica.jne.elecciones.data.Sentencias.Builder other) {
    if (other == null) {
      return new openpolitica.jne.elecciones.data.Sentencias.Builder();
    } else {
      return new openpolitica.jne.elecciones.data.Sentencias.Builder(other);
    }
  }

  /**
   * Creates a new Sentencias RecordBuilder by copying an existing Sentencias instance.
   * @param other The existing instance to copy.
   * @return A new Sentencias RecordBuilder
   */
  public static openpolitica.jne.elecciones.data.Sentencias.Builder newBuilder(openpolitica.jne.elecciones.data.Sentencias other) {
    if (other == null) {
      return new openpolitica.jne.elecciones.data.Sentencias.Builder();
    } else {
      return new openpolitica.jne.elecciones.data.Sentencias.Builder(other);
    }
  }

  /**
   * RecordBuilder for Sentencias instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sentencias>
    implements org.apache.avro.data.RecordBuilder<Sentencias> {

    private java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> sentencias_penales;
    private java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> sentencias_civiles;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(openpolitica.jne.elecciones.data.Sentencias.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sentencias_penales)) {
        this.sentencias_penales = data().deepCopy(fields()[0].schema(), other.sentencias_penales);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sentencias_civiles)) {
        this.sentencias_civiles = data().deepCopy(fields()[1].schema(), other.sentencias_civiles);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Sentencias instance
     * @param other The existing instance to copy.
     */
    private Builder(openpolitica.jne.elecciones.data.Sentencias other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.sentencias_penales)) {
        this.sentencias_penales = data().deepCopy(fields()[0].schema(), other.sentencias_penales);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sentencias_civiles)) {
        this.sentencias_civiles = data().deepCopy(fields()[1].schema(), other.sentencias_civiles);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'sentencias_penales' field.
      * @return The value.
      */
    public java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> getSentenciasPenales() {
      return sentencias_penales;
    }


    /**
      * Sets the value of the 'sentencias_penales' field.
      * @param value The value of 'sentencias_penales'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.data.Sentencias.Builder setSentenciasPenales(java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> value) {
      validate(fields()[0], value);
      this.sentencias_penales = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sentencias_penales' field has been set.
      * @return True if the 'sentencias_penales' field has been set, false otherwise.
      */
    public boolean hasSentenciasPenales() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sentencias_penales' field.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.data.Sentencias.Builder clearSentenciasPenales() {
      sentencias_penales = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sentencias_civiles' field.
      * @return The value.
      */
    public java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> getSentenciasCiviles() {
      return sentencias_civiles;
    }


    /**
      * Sets the value of the 'sentencias_civiles' field.
      * @param value The value of 'sentencias_civiles'.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.data.Sentencias.Builder setSentenciasCiviles(java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> value) {
      validate(fields()[1], value);
      this.sentencias_civiles = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sentencias_civiles' field has been set.
      * @return True if the 'sentencias_civiles' field has been set, false otherwise.
      */
    public boolean hasSentenciasCiviles() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sentencias_civiles' field.
      * @return This builder.
      */
    public openpolitica.jne.elecciones.data.Sentencias.Builder clearSentenciasCiviles() {
      sentencias_civiles = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sentencias build() {
      try {
        Sentencias record = new Sentencias();
        record.sentencias_penales = fieldSetFlags()[0] ? this.sentencias_penales : (java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal>) defaultValue(fields()[0]);
        record.sentencias_civiles = fieldSetFlags()[1] ? this.sentencias_civiles : (java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sentencias>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sentencias>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sentencias>
    READER$ = (org.apache.avro.io.DatumReader<Sentencias>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.sentencias_penales.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (openpolitica.jne.elecciones.data.SentenciaPenal e0: this.sentencias_penales) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.sentencias_civiles.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (openpolitica.jne.elecciones.data.SentenciaCivil e1: this.sentencias_civiles) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> a0 = this.sentencias_penales;
      if (a0 == null) {
        a0 = new SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaPenal>((int)size0, SCHEMA$.getField("sentencias_penales").schema());
        this.sentencias_penales = a0;
      } else a0.clear();
      SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaPenal> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaPenal>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          openpolitica.jne.elecciones.data.SentenciaPenal e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new openpolitica.jne.elecciones.data.SentenciaPenal();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> a1 = this.sentencias_civiles;
      if (a1 == null) {
        a1 = new SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaCivil>((int)size1, SCHEMA$.getField("sentencias_civiles").schema());
        this.sentencias_civiles = a1;
      } else a1.clear();
      SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaCivil> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaCivil>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          openpolitica.jne.elecciones.data.SentenciaCivil e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new openpolitica.jne.elecciones.data.SentenciaCivil();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<openpolitica.jne.elecciones.data.SentenciaPenal> a0 = this.sentencias_penales;
          if (a0 == null) {
            a0 = new SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaPenal>((int)size0, SCHEMA$.getField("sentencias_penales").schema());
            this.sentencias_penales = a0;
          } else a0.clear();
          SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaPenal> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaPenal>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              openpolitica.jne.elecciones.data.SentenciaPenal e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new openpolitica.jne.elecciones.data.SentenciaPenal();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<openpolitica.jne.elecciones.data.SentenciaCivil> a1 = this.sentencias_civiles;
          if (a1 == null) {
            a1 = new SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaCivil>((int)size1, SCHEMA$.getField("sentencias_civiles").schema());
            this.sentencias_civiles = a1;
          } else a1.clear();
          SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaCivil> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.elecciones.data.SentenciaCivil>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              openpolitica.jne.elecciones.data.SentenciaCivil e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new openpolitica.jne.elecciones.data.SentenciaCivil();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










