/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package openpolitica.jne.plataformaelectoral.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Experiencia extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7270096074643121635L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Experiencia\",\"namespace\":\"openpolitica.jne.elecciones.data\",\"fields\":[{\"name\":\"laboral\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ExperienciaLaboral\",\"fields\":[{\"name\":\"item\",\"type\":\"int\"},{\"name\":\"centro_trabajo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXCENTROTRABAJO\"},{\"name\":\"ocupacion_profesion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXOCUPACIONPROFESION\"},{\"name\":\"anio_desde\",\"type\":[\"int\",\"null\"],\"doc\":\"TXANIOTRABAJODESDE\"},{\"name\":\"anio_hasta\",\"type\":[\"int\",\"null\"],\"doc\":\"TXANIOTRABAJOHASTA\"},{\"name\":\"hasta_actualidad\",\"type\":\"boolean\"},{\"name\":\"ubicacion_pais\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_departamento\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_provincia\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_distrito\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ubicacion_direccion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ruc\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},\"doc\":\"EXPERIENCIAS\"},{\"name\":\"cargos_elecciones\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CargoEleccion\",\"fields\":[{\"name\":\"org_politica\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXORGPOLCARGOELEC\"},{\"name\":\"cargo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXCARGOELECCION2\"},{\"name\":\"anio_desde\",\"type\":[\"int\",\"null\"],\"doc\":\"TXANIOCARGOELECDESDE\"},{\"name\":\"anio_hasta\",\"type\":[\"int\",\"null\"],\"doc\":\"TXANIOCARGOPARTIHASTA\"},{\"name\":\"hasta_actualidad\",\"type\":\"boolean\"}]}},\"doc\":\"CARGOELECCIONS\"},{\"name\":\"cargos_partidarios\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CargoPartidario\",\"fields\":[{\"name\":\"org_politica\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXORGPOLCARGOPARTIDARIO\"},{\"name\":\"cargo\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"TXCARGOPARTIDARIO\"},{\"name\":\"anio_desde\",\"type\":[\"int\",\"null\"],\"doc\":\"TXANIOCARGOPARTIDESDE\"},{\"name\":\"anio_hasta\",\"type\":[\"int\",\"null\"],\"doc\":\"TXANIOCARGOPARTIHASTA\"},{\"name\":\"hasta_actualidad\",\"type\":\"boolean\"}]}},\"doc\":\"CARGOPARTIDARIOS\"},{\"name\":\"renuncias\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Renuncia\",\"fields\":[{\"name\":\"org_politica\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"anio\",\"type\":\"int\"}]}},\"doc\":\"RENUNCIAS\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Experiencia> ENCODER =
      new BinaryMessageEncoder<Experiencia>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Experiencia> DECODER =
      new BinaryMessageDecoder<Experiencia>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Experiencia> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Experiencia> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Experiencia> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Experiencia>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Experiencia to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Experiencia from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Experiencia instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Experiencia fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** EXPERIENCIAS */
   private java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> laboral;
  /** CARGOELECCIONS */
   private java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> cargos_elecciones;
  /** CARGOPARTIDARIOS */
   private java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> cargos_partidarios;
  /** RENUNCIAS */
   private java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> renuncias;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Experiencia() {}

  /**
   * All-args constructor.
   * @param laboral EXPERIENCIAS
   * @param cargos_elecciones CARGOELECCIONS
   * @param cargos_partidarios CARGOPARTIDARIOS
   * @param renuncias RENUNCIAS
   */
  public Experiencia(java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> laboral, java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> cargos_elecciones, java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> cargos_partidarios, java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> renuncias) {
    this.laboral = laboral;
    this.cargos_elecciones = cargos_elecciones;
    this.cargos_partidarios = cargos_partidarios;
    this.renuncias = renuncias;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return laboral;
    case 1: return cargos_elecciones;
    case 2: return cargos_partidarios;
    case 3: return renuncias;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: laboral = (java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral>)value$; break;
    case 1: cargos_elecciones = (java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion>)value$; break;
    case 2: cargos_partidarios = (java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario>)value$; break;
    case 3: renuncias = (java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'laboral' field.
   * @return EXPERIENCIAS
   */
  public java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> getLaboral() {
    return laboral;
  }


  /**
   * Sets the value of the 'laboral' field.
   * EXPERIENCIAS
   * @param value the value to set.
   */
  public void setLaboral(java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> value) {
    this.laboral = value;
  }

  /**
   * Gets the value of the 'cargos_elecciones' field.
   * @return CARGOELECCIONS
   */
  public java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> getCargosElecciones() {
    return cargos_elecciones;
  }


  /**
   * Sets the value of the 'cargos_elecciones' field.
   * CARGOELECCIONS
   * @param value the value to set.
   */
  public void setCargosElecciones(java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> value) {
    this.cargos_elecciones = value;
  }

  /**
   * Gets the value of the 'cargos_partidarios' field.
   * @return CARGOPARTIDARIOS
   */
  public java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> getCargosPartidarios() {
    return cargos_partidarios;
  }


  /**
   * Sets the value of the 'cargos_partidarios' field.
   * CARGOPARTIDARIOS
   * @param value the value to set.
   */
  public void setCargosPartidarios(java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> value) {
    this.cargos_partidarios = value;
  }

  /**
   * Gets the value of the 'renuncias' field.
   * @return RENUNCIAS
   */
  public java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> getRenuncias() {
    return renuncias;
  }


  /**
   * Sets the value of the 'renuncias' field.
   * RENUNCIAS
   * @param value the value to set.
   */
  public void setRenuncias(java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> value) {
    this.renuncias = value;
  }

  /**
   * Creates a new Experiencia RecordBuilder.
   * @return A new Experiencia RecordBuilder
   */
  public static openpolitica.jne.plataformaelectoral.data.Experiencia.Builder newBuilder() {
    return new openpolitica.jne.plataformaelectoral.data.Experiencia.Builder();
  }

  /**
   * Creates a new Experiencia RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Experiencia RecordBuilder
   */
  public static openpolitica.jne.plataformaelectoral.data.Experiencia.Builder newBuilder(openpolitica.jne.plataformaelectoral.data.Experiencia.Builder other) {
    if (other == null) {
      return new openpolitica.jne.plataformaelectoral.data.Experiencia.Builder();
    } else {
      return new openpolitica.jne.plataformaelectoral.data.Experiencia.Builder(other);
    }
  }

  /**
   * Creates a new Experiencia RecordBuilder by copying an existing Experiencia instance.
   * @param other The existing instance to copy.
   * @return A new Experiencia RecordBuilder
   */
  public static openpolitica.jne.plataformaelectoral.data.Experiencia.Builder newBuilder(openpolitica.jne.plataformaelectoral.data.Experiencia other) {
    if (other == null) {
      return new openpolitica.jne.plataformaelectoral.data.Experiencia.Builder();
    } else {
      return new openpolitica.jne.plataformaelectoral.data.Experiencia.Builder(other);
    }
  }

  /**
   * RecordBuilder for Experiencia instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Experiencia>
    implements org.apache.avro.data.RecordBuilder<Experiencia> {

    /** EXPERIENCIAS */
    private java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> laboral;
    /** CARGOELECCIONS */
    private java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> cargos_elecciones;
    /** CARGOPARTIDARIOS */
    private java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> cargos_partidarios;
    /** RENUNCIAS */
    private java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> renuncias;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(openpolitica.jne.plataformaelectoral.data.Experiencia.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.laboral)) {
        this.laboral = data().deepCopy(fields()[0].schema(), other.laboral);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.cargos_elecciones)) {
        this.cargos_elecciones = data().deepCopy(fields()[1].schema(), other.cargos_elecciones);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cargos_partidarios)) {
        this.cargos_partidarios = data().deepCopy(fields()[2].schema(), other.cargos_partidarios);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.renuncias)) {
        this.renuncias = data().deepCopy(fields()[3].schema(), other.renuncias);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Experiencia instance
     * @param other The existing instance to copy.
     */
    private Builder(openpolitica.jne.plataformaelectoral.data.Experiencia other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.laboral)) {
        this.laboral = data().deepCopy(fields()[0].schema(), other.laboral);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cargos_elecciones)) {
        this.cargos_elecciones = data().deepCopy(fields()[1].schema(), other.cargos_elecciones);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cargos_partidarios)) {
        this.cargos_partidarios = data().deepCopy(fields()[2].schema(), other.cargos_partidarios);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.renuncias)) {
        this.renuncias = data().deepCopy(fields()[3].schema(), other.renuncias);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'laboral' field.
      * EXPERIENCIAS
      * @return The value.
      */
    public java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> getLaboral() {
      return laboral;
    }


    /**
      * Sets the value of the 'laboral' field.
      * EXPERIENCIAS
      * @param value The value of 'laboral'.
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder setLaboral(java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> value) {
      validate(fields()[0], value);
      this.laboral = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'laboral' field has been set.
      * EXPERIENCIAS
      * @return True if the 'laboral' field has been set, false otherwise.
      */
    public boolean hasLaboral() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'laboral' field.
      * EXPERIENCIAS
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder clearLaboral() {
      laboral = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cargos_elecciones' field.
      * CARGOELECCIONS
      * @return The value.
      */
    public java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> getCargosElecciones() {
      return cargos_elecciones;
    }


    /**
      * Sets the value of the 'cargos_elecciones' field.
      * CARGOELECCIONS
      * @param value The value of 'cargos_elecciones'.
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder setCargosElecciones(java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> value) {
      validate(fields()[1], value);
      this.cargos_elecciones = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cargos_elecciones' field has been set.
      * CARGOELECCIONS
      * @return True if the 'cargos_elecciones' field has been set, false otherwise.
      */
    public boolean hasCargosElecciones() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cargos_elecciones' field.
      * CARGOELECCIONS
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder clearCargosElecciones() {
      cargos_elecciones = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cargos_partidarios' field.
      * CARGOPARTIDARIOS
      * @return The value.
      */
    public java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> getCargosPartidarios() {
      return cargos_partidarios;
    }


    /**
      * Sets the value of the 'cargos_partidarios' field.
      * CARGOPARTIDARIOS
      * @param value The value of 'cargos_partidarios'.
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder setCargosPartidarios(java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> value) {
      validate(fields()[2], value);
      this.cargos_partidarios = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cargos_partidarios' field has been set.
      * CARGOPARTIDARIOS
      * @return True if the 'cargos_partidarios' field has been set, false otherwise.
      */
    public boolean hasCargosPartidarios() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cargos_partidarios' field.
      * CARGOPARTIDARIOS
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder clearCargosPartidarios() {
      cargos_partidarios = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'renuncias' field.
      * RENUNCIAS
      * @return The value.
      */
    public java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> getRenuncias() {
      return renuncias;
    }


    /**
      * Sets the value of the 'renuncias' field.
      * RENUNCIAS
      * @param value The value of 'renuncias'.
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder setRenuncias(java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> value) {
      validate(fields()[3], value);
      this.renuncias = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'renuncias' field has been set.
      * RENUNCIAS
      * @return True if the 'renuncias' field has been set, false otherwise.
      */
    public boolean hasRenuncias() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'renuncias' field.
      * RENUNCIAS
      * @return This builder.
      */
    public openpolitica.jne.plataformaelectoral.data.Experiencia.Builder clearRenuncias() {
      renuncias = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Experiencia build() {
      try {
        Experiencia record = new Experiencia();
        record.laboral = fieldSetFlags()[0] ? this.laboral : (java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral>) defaultValue(fields()[0]);
        record.cargos_elecciones = fieldSetFlags()[1] ? this.cargos_elecciones : (java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion>) defaultValue(fields()[1]);
        record.cargos_partidarios = fieldSetFlags()[2] ? this.cargos_partidarios : (java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario>) defaultValue(fields()[2]);
        record.renuncias = fieldSetFlags()[3] ? this.renuncias : (java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Experiencia>
    WRITER$ = (org.apache.avro.io.DatumWriter<Experiencia>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Experiencia>
    READER$ = (org.apache.avro.io.DatumReader<Experiencia>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.laboral.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral e0: this.laboral) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.cargos_elecciones.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (openpolitica.jne.plataformaelectoral.data.CargoEleccion e1: this.cargos_elecciones) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.cargos_partidarios.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (openpolitica.jne.plataformaelectoral.data.CargoPartidario e2: this.cargos_partidarios) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.renuncias.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (openpolitica.jne.plataformaelectoral.data.Renuncia e3: this.renuncias) {
      actualSize3++;
      out.startItem();
      e3.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> a0 = this.laboral;
      if (a0 == null) {
        a0 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral>((int)size0, SCHEMA$.getField("laboral").schema());
        this.laboral = a0;
      } else a0.clear();
      SpecificData.Array<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> a1 = this.cargos_elecciones;
      if (a1 == null) {
        a1 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoEleccion>((int)size1, SCHEMA$.getField("cargos_elecciones").schema());
        this.cargos_elecciones = a1;
      } else a1.clear();
      SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoEleccion> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoEleccion>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          openpolitica.jne.plataformaelectoral.data.CargoEleccion e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new openpolitica.jne.plataformaelectoral.data.CargoEleccion();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> a2 = this.cargos_partidarios;
      if (a2 == null) {
        a2 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoPartidario>((int)size2, SCHEMA$.getField("cargos_partidarios").schema());
        this.cargos_partidarios = a2;
      } else a2.clear();
      SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoPartidario> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoPartidario>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          openpolitica.jne.plataformaelectoral.data.CargoPartidario e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new openpolitica.jne.plataformaelectoral.data.CargoPartidario();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> a3 = this.renuncias;
      if (a3 == null) {
        a3 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.Renuncia>((int)size3, SCHEMA$.getField("renuncias").schema());
        this.renuncias = a3;
      } else a3.clear();
      SpecificData.Array<openpolitica.jne.plataformaelectoral.data.Renuncia> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.Renuncia>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          openpolitica.jne.plataformaelectoral.data.Renuncia e3 = (ga3 != null ? ga3.peek() : null);
          if (e3 == null) {
            e3 = new openpolitica.jne.plataformaelectoral.data.Renuncia();
          }
          e3.customDecode(in);
          a3.add(e3);
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> a0 = this.laboral;
          if (a0 == null) {
            a0 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral>((int)size0, SCHEMA$.getField("laboral").schema());
            this.laboral = a0;
          } else a0.clear();
          SpecificData.Array<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new openpolitica.jne.plataformaelectoral.data.ExperienciaLaboral();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<openpolitica.jne.plataformaelectoral.data.CargoEleccion> a1 = this.cargos_elecciones;
          if (a1 == null) {
            a1 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoEleccion>((int)size1, SCHEMA$.getField("cargos_elecciones").schema());
            this.cargos_elecciones = a1;
          } else a1.clear();
          SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoEleccion> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoEleccion>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              openpolitica.jne.plataformaelectoral.data.CargoEleccion e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new openpolitica.jne.plataformaelectoral.data.CargoEleccion();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<openpolitica.jne.plataformaelectoral.data.CargoPartidario> a2 = this.cargos_partidarios;
          if (a2 == null) {
            a2 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoPartidario>((int)size2, SCHEMA$.getField("cargos_partidarios").schema());
            this.cargos_partidarios = a2;
          } else a2.clear();
          SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoPartidario> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.CargoPartidario>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              openpolitica.jne.plataformaelectoral.data.CargoPartidario e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new openpolitica.jne.plataformaelectoral.data.CargoPartidario();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        case 3:
          long size3 = in.readArrayStart();
          java.util.List<openpolitica.jne.plataformaelectoral.data.Renuncia> a3 = this.renuncias;
          if (a3 == null) {
            a3 = new SpecificData.Array<openpolitica.jne.plataformaelectoral.data.Renuncia>((int)size3, SCHEMA$.getField("renuncias").schema());
            this.renuncias = a3;
          } else a3.clear();
          SpecificData.Array<openpolitica.jne.plataformaelectoral.data.Renuncia> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<openpolitica.jne.plataformaelectoral.data.Renuncia>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              openpolitica.jne.plataformaelectoral.data.Renuncia e3 = (ga3 != null ? ga3.peek() : null);
              if (e3 == null) {
                e3 = new openpolitica.jne.plataformaelectoral.data.Renuncia();
              }
              e3.customDecode(in);
              a3.add(e3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










